<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Friday, November 13, 2020, 1:31 PM -->
<!-- MuClient version 5.06 -->

<!-- Plugin "SpiderCrates" generated by Plugin Wizard -->

<muclient>
<plugin
   name="SpiderCrates"
   author="Kloke"
   id="642d272a676a439105c94e80"
   language="Lua"
   purpose="Track prying open and investigation of crates in Copperhead mines."
   date_written="2020-11-13 13:29:48"
   requires="5.06"
   version="1.1"
   >
<description trim="y">
<![CDATA[
Track prying open and investigation of crates in Copperhead mines.

TODO:
	*	Add details on what's needed and how to use the plugin on load
]]>
</description>

</plugin>
<!--  Triggers  -->

<triggers>
  <trigger
   custom_colour="3"
   enabled="y"
   group="crates"
   match="^Crates and pots fill this room\, lined up in neat rows with space to walk through\.(.*?)$"
   regexp="y"
   sequence="100"
  >
  </trigger>
  <trigger
   custom_colour="3"
   enabled="y"
   group="crates"
   match="^(.*?)They\'re arranged in a (?P&lt;rowword&gt;.*?)\-by\-(?P&lt;columnword&gt;.*?) grid\, whose rows you mentally label from (?P&lt;rowstart&gt;.*?)\-(?P&lt;rowfinish&gt;.*?) and columns from (?P&lt;columnstart&gt;.*?) to (?P&lt;columnfinish&gt;.*?)\.  All of them are currently closed\.$"
   regexp="y"
   send_to="12"
   sequence="100"
   script="CrateElements"
  >
  </trigger>
  <trigger
   custom_colour="3"
   enabled="y"
   group="crates"
   match="^You climb onto crate (?P<Crate>.*?) and listen carefully\.  From the volume of the (scrabbling|chittering)\, you think that (?P<AdjacentSpiders>.*?) of the surrounding crates contain what may or may not be giant spiders\.$"
   regexp="y"
   send_to="12"
   sequence="100"
   script="UpdateCrate"
  >
  </trigger>  
  <trigger
   custom_colour="3"
   enabled="y"
   group="crates"
   match="^You pry open crate (.*?) Once it's clear there's nothing for them to eat\, the swarm turns on itself\, spider devouring spider\, until only a few survive to scuttle away into the tunnels\.$"
   regexp="y"
   send_to="12"
   sequence="100"
   script="CratesComplete"
  >
  </trigger>
  
</triggers>

<!--  Plugin help  -->

<aliases>
  <alias
   script="OnHelp"
   match="SpiderCrates:help"
   enabled="y"
  >
  </alias>  
  <alias
   script="CratesComplete"
   match="sch end"
   enabled="y"
  >
  </alias>  
</aliases>

<script>
<![CDATA[
require ("tprint")
function OnHelp ()
  world.Note (world.GetPluginInfo (world.GetPluginID (), 3))
end
function CrateElements(name,line,wildcards)
	Note (wildcards.rowword) -- three/five
	Note (wildcards.columnword) -- five/three
	Note (wildcards.rowstart) -- A
	Note (wildcards.rowfinish) -- C/E
	Note (wildcards.columnstart) -- 1
	Note (wildcards.columnfinish) -- 3/5
	
	--make a table with those elements
	if (wildcards.rowword == "three") then
		-- three-by-five
		rows  = 3
		columns = 5
		crates = {
			["a1"]={
				["name"]="a1",
				["adjacent"]="?",
				["spider"]=false,
			},
			["a2"]={
				["name"]="a2",
				["adjacent"]="?",
				["spider"]=false,
			},
			["a3"]={
				["name"]="a3",
				["adjacent"]="?",
				["spider"]=false,
			},
			["a4"]={
				["name"]="a4",
				["adjacent"]="?",
				["spider"]=false,
			},
			["a5"]={
				["name"]="a5",
				["adjacent"]="?",
				["spider"]=false,
			},
			["b1"]={
				["name"]="b1",
				["adjacent"]="?",
				["spider"]=false,
			},
			["b2"]={
				["name"]="b2",
				["adjacent"]="?",
				["spider"]=false,
			},
			["b3"]={
				["name"]="b3",
				["adjacent"]="?",
				["spider"]=false,
			},
			["b4"]={
				["name"]="b4",
				["adjacent"]="?",
				["spider"]=false,
			},
			["b5"]={
				["name"]="b5",
				["adjacent"]="?",
				["spider"]=false,
			},
			["c1"]={
				["name"]="c1",
				["adjacent"]="?",
				["spider"]=false,
			},
			["c2"]={
				["name"]="c2",
				["adjacent"]="?",
				["spider"]=false,
			},
			["c3"]={
				["name"]="c3",
				["adjacent"]="?",
				["spider"]=false,
			},
			["c4"]={
				["name"]="c4",
				["adjacent"]="?",
				["spider"]=false,
			},
			["c5"]={
				["name"]="c5",
				["adjacent"]="?",
				["spider"]=false,
			},
		}
	elseif (wildcards.rowword == "four") then
		-- four-by-four
		rows  = 4
		columns = 4
		crates = {
			["a1"]={
				["name"]="a1",
				["adjacent"]="?",
				["spider"]=false,
			},
			["a2"]={
				["name"]="a2",
				["adjacent"]="?",
				["spider"]=false,
			},
			["a3"]={
				["name"]="a3",
				["adjacent"]="?",
				["spider"]=false,
			},
			["a4"]={
				["name"]="a4",
				["adjacent"]="?",
				["spider"]=false,
			},
			["b1"]={
				["name"]="b1",
				["adjacent"]="?",
				["spider"]=false,
			},
			["b2"]={
				["name"]="b2",
				["adjacent"]="?",
				["spider"]=false,
			},
			["b3"]={
				["name"]="b3",
				["adjacent"]="?",
				["spider"]=false,
			},
			["b4"]={
				["name"]="b4",
				["adjacent"]="?",
				["spider"]=false,
			},
			["c1"]={
				["name"]="c1",
				["adjacent"]="?",
				["spider"]=false,
			},
			["c2"]={
				["name"]="c2",
				["adjacent"]="?",
				["spider"]=false,
			},
			["c3"]={
				["name"]="c3",
				["adjacent"]="?",
				["spider"]=false,
			},
			["c4"]={
				["name"]="c4",
				["adjacent"]="?",
				["spider"]=false,
			},
			["d1"]={
				["name"]="d1",
				["adjacent"]="?",
				["spider"]=false,
			},
			["d2"]={
				["name"]="d2",
				["adjacent"]="?",
				["spider"]=false,
			},
			["d3"]={
				["name"]="d3",
				["adjacent"]="?",
				["spider"]=false,
			},
			["d4"]={
				["name"]="d4",
				["adjacent"]="?",
				["spider"]=false,
			},
		}
	else
		-- five-by-three
		rows  = 5
		columns = 3
		crates = {
			["a1"]={
				["name"]="a1",
				["adjacent"]="?",
				["spider"]=false,
			},
			["a2"]={
				["name"]="a2",
				["adjacent"]="?",
				["spider"]=false,
			},
			["a3"]={
				["name"]="a3",
				["adjacent"]="?",
				["spider"]=false,
			},
			["b1"]={
				["name"]="b1",
				["adjacent"]="?",
				["spider"]=false,
			},
			["b2"]={
				["name"]="b2",
				["adjacent"]="?",
				["spider"]=false,
			},
			["b3"]={
				["name"]="b3",
				["adjacent"]="?",
				["spider"]=false,
			},
			["c1"]={
				["name"]="c1",
				["adjacent"]="?",
				["spider"]=false,
			},
			["c2"]={
				["name"]="c2",
				["adjacent"]="?",
				["spider"]=false,
			},
			["c3"]={
				["name"]="c3",
				["adjacent"]="?",
				["spider"]=false,
			},
			["d1"]={
				["name"]="d1",
				["adjacent"]="?",
				["spider"]=false,
			},
			["d2"]={
				["name"]="d2",
				["adjacent"]="?",
				["spider"]=false,
			},
			["d3"]={
				["name"]="d3",
				["adjacent"]="?",
				["spider"]=false,
			},
			["e1"]={
				["name"]="e1",
				["adjacent"]="?",
				["spider"]=false,
			},
			["e2"]={
				["name"]="e2",
				["adjacent"]="?",
				["spider"]=false,
			},
			["e3"]={
				["name"]="e3",
				["adjacent"]="?",
				["spider"]=false,
			},
		}
	end -- if
	Numbers = {
		["zero"] = {["Number"] = "0"},
		["one"] = {["Number"] = "1"},
		["two"] = {["Number"] = "2"},
		["three"] = {["Number"] = "3"},
		["four"] = {["Number"] = "4"},
		["five"] = {["Number"] = "5"},
		["six"] = {["Number"] = "6"},
	}
	Letters = {
		"A",
		"B",
		"C",
		"D",
		"E",		
	}
	--tprint (crates)
	Note ("Rows: " .. rows .. ", Columns: " .. columns)
	DisplayCrates ()
end -- function CrateElements
function DisplayCrates ()
	WindowCreate (win, 0, 0, columns * 50, rows * 50, miniwin.pos_center_all, 0, ColourNameToRGB("white"))
	-- Create Close 'X'
	FontColour = ColourNameToRGB("red")
	WindowText (win, "f", "X", 10, 10, 0, 0, FontColour, false)
	WindowAddHotspot(win, "close",  
			   10, 10, 20, 20,
			   "", -- mouseover (do nothing)
			   "", -- cancelmouseover (do nothing)
			   "MouseDown",
			   "", -- cancelmousedown (do nothing)
			   "", -- mouseup (do nothing)
			   hint,    -- hint text if they hover over it              
			   miniwin.cursor_hand, 0)	
	
	-- Add crates
	FontColour = ColourNameToRGB("green")
	WindowFont (win, "f", "Trebuchet MS", 12, true, false, false, false) -- define font
	for r = 1, rows do
		WindowText (win, "f", Letters [r], 20, (r * 20) + 20, 0, 0, FontColour, false)
	end -- for
	for c = 1, columns do
		WindowText (win, "f", c, (c * 20) + 20, 20, 0, 0, FontColour, false)
	end -- for
	for k, v in pairs (crates) do
		--Note (v["name"] .. " " .. v["adjacent"])
		local row = tonumber((string.byte(string.sub(v["name"],1,1))-96))
		local column = tonumber((string.sub(v["name"], 2,2)))
		--Note ("Row: " .. row .. ", Column: " .. column)
		WindowFont (win, "f", "Trebuchet MS", 12, false, false, false, false) -- define font
		WindowText (win, "f", v["adjacent"], (column * 20) + 20, (row * 20) + 20, 0, 0, FontColour, false)
		WindowAddHotspot(win, v["name"],  
                   column * 20 + 20, row * 20 + 20, (column * 20) + 40, (row * 20) + 40, 
                   "", -- mouseover (do nothing)
                   "", -- cancelmouseover (do nothing)
                   "MouseDown",
                   "", -- cancelmousedown (do nothing)
                   "", -- mouseup (do nothing)
                   hint,    -- hint text if they hover over it              
                   miniwin.cursor_hand, 0)
	end -- for
	Redraw ()
	WindowShow (win, true)
end -- function DisplayCrates
function MouseDown (name, line, wildcards)
	Note (line)
	if (line == "close") then
		CratesComplete()
	else
		Send ("pry crate " .. line .. " with crowbar")
		Send ("investigate " .. line)
	end -- if
end -- function MouseDown
function UpdateCrate (name,line,wildcards)
	
	--Note ("Crate: " .. wildcards.Crate)
	local crate = string.lower(wildcards.Crate)
	--Note ("AdjacentSpiders: " .. wildcards.AdjacentSpiders)
	--Note ("Number: " .. Numbers[wildcards.AdjacentSpiders]["Number"])
	
	local AdjacentSpiders = Numbers[wildcards.AdjacentSpiders] ["Number"]
	--Note ("AdjacentSpiders: " .. AdjacentSpiders)
	-- update crate with number of spiders
	crates[crate] ["adjacent"] = AdjacentSpiders
	-- Update display
	DisplayCrates ()
end -- function UpdateCrate
function CratesComplete ()
	-- clear table
	crates = nil
	-- hide window
	Note ("Crates table cleared.")
	WindowShow (win, false)
end -- function CratesComplete
function OnPluginInstall ()

  win = "win" .. GetPluginID ()
  font_id = "fn"
  bold_font_id = "fb"
  
  font_name = "Sylfaen"    -- the actual font
  font_size = 8

  -- make window so I can grab the font info
  WindowCreate (win, 
				0, 0, 0, 0,  -- empty window
				miniwin.pos_top_left,   -- position (irrelevant)
				0,   -- flags (none)
				0)   -- background colour (black - irrelevant)
				
  -- add font in normal and bold styles                 
  WindowFont (win, font_id, font_name, font_size, 
			  false, false, false, false,  -- normal
			  miniwin.font_charset_ansi, miniwin.font_family_any)
			  
  WindowFont (win, bold_font_id, font_name, font_size, 
			  true, false, false, false,   -- bold
			  miniwin.font_charset_ansi, miniwin.font_family_any)
  
  -- find height of font for future calculations             
  font_height = WindowFontInfo (win, font_id, 1)  -- height
  -- Add hotspot for window move
	WindowAddHotspot(win, "dragwindow",  
			   0, 0, 20, 20, 
			   "", -- mouseover (do nothing)
			   "", -- cancelmouseover (do nothing)
			   "dragmousedown",
			   "", -- cancelmousedown (do nothing)
			   "", -- mouseup (do nothing)
			   hint,    -- hint text if they hover over it              
			   miniwin.cursor_hand, 0)
end -- OnPluginInstall
]]>
</script> 

</muclient>
