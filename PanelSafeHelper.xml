<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Saturday, October 31, 2020, 4:03 PM -->
<!-- MuClient version 5.06 -->

<!-- Plugin "PanelSafeHelper" generated by Plugin Wizard -->

<muclient>
<plugin
   name="PanelSafeHelper"
   author="Kalu"
   id="71a76b438ec6fa4671b9c4b6"
   language="Lua"
   purpose="Help keep track of which contacts, letters and wires have been eliminated"
   date_written="2020-10-31 15:52:21"
   requires="5.06"
   version="1.2"
   >
<description trim="y">
<![CDATA[
Help keep track of which contacts, letters and wires have been eliminated.
In progress v1.1 - Added button to perform all possible moves
v1.0 - Initial release

v0.1
	If a successful panel safe crack is detected
	 - create a table of contacts, letters and wires each with a state of in-
	play=true
	 - create a window that displays the current in-play state of contacts, letters and wires.
	If a contact is eliminated, set that contact's in-play state to false.
	If a letter is eliminated, set that letter's in-play state to false.
	If a wire is eliminated change that wire's in-play state to false.
	If a connection attempt is detected update the window to reflect the current in-play state of contacts, letters and wires.

	All in-play (colours green):
	C C C | A B C | R O Y
	C C C | D E F | G B
	C C C | G H
	 
	None in-play (colours red):
	c c c | a b c | r o y
	c c c | d e f | g b
	c c c | g h 

v0.2
	Display status of components in a window
	Track status of charged/discharged letters
	Hyperlink to select wire
	Hyperlink to select letter
	If both wire and letter (charged) 
	 - connect <colour> wire to <letter>.
	 - change letter state to discharged.
	Set state PanelCracking to true if succesful crack message is triggered.
	Set state PanelCracking to false
	 - if true and you give up your attempt to crack the safe; or
	 - the safe is successfully unlocked.
 
v0.3
	Varous shenanigans
v0.4
	Fixed successful unlock trigger 

v0.5
	Added suggested pan parameters
	
v0.6-1.0
	Many rethinks
	Close X
	Hyperlinks for suggeted connections
	
v1.1
	Addition of pan alias hyperlink

v1.2
	Code review and tidy.
]]>
</description>
SetVariable("InPlayColour", "green")
SetVariable("NotInPlayColour","red")
ResetTable

</plugin>


<!--  Triggers  -->
<triggers>
  <trigger
   custom_colour="3"
   enabled="y"
   group="panelsafe"
   match="^On the front of the safe is a grid of nine contact regions\, above which are eight lock pieces\, labelled \&quot;A\&quot; to \&quot;H\&quot;\, that can slide from one contact region to another\.  To the side of the grid are five colour\-coded retractable wires\, each ending with a connector that fits any of the lock pieces\.  From studying the mechanism you deduce that the best strategy is to inspect the control panel to work out how the lock pieces are positioned\, slide one to new contact region if required and connect one of the coloured wires to it\.  Finding the correct combination will unlock the safe\.$"
   regexp="y"
   sequence="100"
   script="SuccessfulPanelCrack"
  >
  </trigger>
  <trigger
   custom_colour="3"
   enabled="y"
   group="panelsafe"
   match="^The (?P<component>.*?) wire doesn\'t appear to be involved in cracking the lock\.$"
   regexp="y"
   sequence="100"
   script="OutPlay"
  >
  </trigger>
  <trigger
   custom_colour="3"
   enabled="y"
   group="panelsafe"
   match="^pan complete$"
   regexp="y"
   sequence="100"
   script="TestPanel"
  >  
  </trigger>  
  <trigger
   custom_colour="15"
   enabled="y"
   group="panelsafe"
   lines_to_match="13"
   keep_evaluating="y"   
   match=
   "\+\-\-\-\-\-\-\-\+\-\-\-\-\-\-\-\+\-\-\-\-\-\-\-\+\n\|       \|       \|       \|\n\|   +(?<tl>[A-H]|\s)       +(?<tm>[A-H]|\s)       +(?<tr>[A-H]|\s)   \|\n\|       \|       \|       \|\n\+\-\-   \-\-\+\-\-   \-\-\+\-\-   \-\-\+\n\|       \|       \|       \|\n\|   +(?<ml>[A-H]|\s)       +(?<mm>[A-H]|\s)       +(?<mr>[A-H]|\s)   \|\n\|       \|       \|       \|\n\+\-\-   \-\-\+\-\-   \-\-\+\-\-   \-\-\+\n\|       \|       \|       \|\n\|   +(?<bl>[A-H]|\s)       +(?<bm>[A-H]|\s)       +(?<br>[A-H]|\s)   \|\n\|       \|       \|       \|\n\+\-\-\-\-\-\-\-\+\-\-\-\-\-\-\-\+\-\-\-\-\-\-\-\+\Z"
   multi_line="y"
   regexp="y"
   sequence="10"
   script="UpdateGrid"
  >
  </trigger>
  
  <trigger
   custom_colour="15"
   enabled="y"
   group="panelsafe"
   match="^The (?P<component>.*?) contact doesn\'t seem important for cracking the lock\.$"
   regexp="y"
   sequence="100"
   script="OutPlay"
  >
  </trigger>
  <trigger
   custom_colour="15"
   enabled="y"
   group="panelsafe"
   match="^You connect the (?P<wire>.*?) wire to lock piece \&quot;(?P<piece>.*?)\&quot;(.*?)$"
   regexp="y"
   sequence="100"
   script="DisChargeLetter"
  >
  </trigger>   
  <trigger
   name="InspectSafe"
   custom_colour="15"
   enabled="n"
   group="panelsafe"
   match="^You inspect the control panel on the safe\.$"
   regexp="y"
   sequence="100"
   script="DisplayComponents"
  >
  </trigger>
  <trigger
   custom_colour="3"
   enabled="y"
   group="panelsafe"
   match="^There is a brief spark and a puff of smoke from the contact (.*?)$"
   regexp="y"
   sequence="100"
   script="SafeCracked"
  >
  </trigger> 
  <trigger
   custom_colour="15"
   enabled="y"
   group="panelsafe"
   match="^You realise that lock piece \&quot;(?P<component>.*?)\&quot; is not required for cracking the lock\.$"
   regexp="y"
   sequence="100"
   script="OutPlay"
  >
  </trigger>
  <trigger
   custom_colour="15"
   enabled="y"
   group="panelsafe"
   match="^You stop attempting to crack the safe\.$"
   regexp="y"
   sequence="100"
   script="AbandonSafe"
  >
  </trigger> 
  <trigger
   custom_colour="15"
   enabled="y"
   group="panelsafe"
   match="^You slide piece \&quot;(?P<Letter>.*?)\&quot; (.*?)$"
   regexp="y"
   sequence="100"
   script="ChargeLetter"
  >
  </trigger> 
  
  
</triggers>

<!--  Plugin help  -->

<aliases>
  <alias
   script="OnHelp"
   match="PanelSafeHelper:help"
   enabled="y"
  >
  </alias>
  <alias
   script="DisplayComponents"
   match="DisplayComponents"
   enabled="y"
  >
  </alias>
  <alias
   script="OutPlay"
   match="OutPlay *"
   enabled="y"
  >
  </alias>
  <alias
   script="ResetTable"
   match="ResetPSHTable"
   enabled="y"
  >
  </alias>
  <alias
   script="TestPanel"
   match="TestPanel"
   enabled="y"
  >
  </alias>
  
  
</aliases>

<script>
<![CDATA[
--FUNCTIONS
	require("tprint")
	function OnHelp ()
	  world.Note (world.GetPluginInfo (world.GetPluginID (), 3))
	end -- function OnHelp
	
	function ResetTable ()
		require "tprint"
		local InPlayColour = "green"
		local NotInPlayColour = "red"
		SafePieces={
			["top-left"] = {
				["ID"]="top-left",
				["InPlay"]="C", 
				["Colour"]=InPlayColour,
				["Type"]="Panel",
				["Column"]=2,
				["Row"]=2,
			},
			["top-centre"] = {
				["ID"]="top-centre",
				["InPlay"]="C", 
				["Colour"]=InPlayColour,
				["Type"]="Panel",
				["Column"]=3,
				["Row"]=2,				
			},
			["top-right"] = {
				["ID"]="top-right",
				["InPlay"]="C", 
				["Colour"]=InPlayColour,
				["Type"]="Panel",
				["Column"]=4,
				["Row"]=2,
			},
			["middle-left"] = {
				["ID"]="middle-left",
				["InPlay"]="C", 
				["Colour"]=InPlayColour,
				["Type"]="Panel",
				["Column"]=2,
				["Row"]=3,
			},
			["centre"] = {
				["ID"]="center",
				["InPlay"]="C", 
				["Colour"]=InPlayColour,
				["Type"]="Panel",
				["Column"]=3,
				["Row"]=3,
			},
			["middle-right"] = {
				["ID"]="middle-right",
				["InPlay"]="C", 
				["Colour"]=InPlayColour,
				["Type"]="Panel",
				["Column"]=4,
				["Row"]=3,
			},
			["bottom-left"] = {
				["ID"]="bottom-left",
				["InPlay"]="C", 
				["Colour"]=InPlayColour,
				["Type"]="Panel",
				["Column"]=2,
				["Row"]=4,
			},
			["bottom-centre"] = {
				["ID"]="bottom-centre",
				["InPlay"]="C", 
				["Colour"]=InPlayColour,
				["Type"]="Panel",
				["Column"]=3,
				["Row"]=4,
			},
			["bottom-right"] = {
				["ID"]="bottom-right",
				["InPlay"]="C", 
				["Colour"]=InPlayColour,
				["Type"]="Panel",
				["Column"]=4,
				["Row"]=4,
			},
			["A"] = {
				["ID"]="A",
				["InPlay"]="A", 
				["Colour"]=InPlayColour,
				["Type"]="Letter",
				["Column"]=5,
				["Row"]=2,
				["Charged"]=true,
				["Selected"]=false,
			},
			["B"] = {
				["ID"]="B",
				["InPlay"]="B", 
				["Colour"]=InPlayColour,
				["Type"]="Letter",
				["Column"]=6,
				["Row"]=2,
				["Charged"]=true,
				["Selected"]=false,
			},
			["C"] = {
				["ID"]="C",
				["InPlay"]="C", 
				["Colour"]=InPlayColour,
				["Type"]="Letter",
				["Column"]=7,
				["Row"]=2,
				["Charged"]=true,
				["Selected"]=false,
			},
			["D"] = {
				["ID"]="D",
				["InPlay"]="D", 
				["Colour"]=InPlayColour,
				["Type"]="Letter",
				["Column"]=5,
				["Row"]=3,
				["Charged"]=true,
				["Selected"]=false,
			},
			["E"] = {
				["ID"]="E",
				["InPlay"]="E", 
				["Colour"]=InPlayColour,
				["Type"]="Letter",
				["Column"]=6,
				["Row"]=3,
				["Charged"]=true,
				["Selected"]=false,
			},
			["F"] = {
				["ID"]="F",
				["InPlay"]="F", 
				["Colour"]=InPlayColour,
				["Type"]="Letter",
				["Column"]=7,
				["Row"]=3,
				["Charged"]=true,
				["Selected"]=false,
			},
			["G"] = {
				["ID"]="G",
				["InPlay"]="G", 
				["Colour"]=InPlayColour,
				["Type"]="Letter",
				["Column"]=5,
				["Row"]=4,
				["Charged"]=true,
				["Selected"]=false,
			},
			["H"] = {
				["ID"]="H",
				["InPlay"]="H", 
				["Colour"]=InPlayColour,
				["Type"]="Letter",
				["Column"]=6,
				["Row"]=4,
				["Charged"]=true,
				["Selected"]=false,
			},
			["red"] = {
				["ID"]="red",
				["InPlay"]="R", 
				["Colour"]=InPlayColour,
				["Type"]="Wire",
				["Column"]=9,
				["Row"]=2,
				["Selected"]=false,
			},
			["orange"] = {
				["ID"]="orange",
				["InPlay"]="O", 
				["Colour"]=InPlayColour,
				["Type"]="Wire",
				["Column"]=10,
				["Row"]=2,
				["Selected"]=false,
			},
			["yellow"] = {
				["ID"]="yellow",
				["InPlay"]="Y", 
				["Colour"]=InPlayColour,
				["Type"]="Wire",
				["Column"]=11,
				["Row"]=2,
				["Selected"]=false,
			},
			["green"] = {
				["ID"]="green",
				["InPlay"]="G", 
				["Colour"]=InPlayColour,
				["Type"]="Wire",
				["Column"]=9,
				["Row"]=3,
				["Selected"]=false,
			},
			["blue"] = {
				["ID"]="blue",
				["InPlay"]="B", 
				["Colour"]=InPlayColour,
				["Type"]="Wire",
				["Column"]=10,
				["Row"]=3,
				["Selected"]=false,
			}
		}
		--tprint (SafePieces)
		-- recreate the window the correct size
		WindowCreate (win, 
             0, 0,   -- left, top (auto-positions)
             300,     -- width
             150,  -- height
             miniwin.pos_center_right,       -- position
             0,  -- flags
             0x696969)   -- yellow background
			 
			WindowShow (win, true)
		DisplayComponents ()
	end -- function ResetTable
	
	function DisplayComponents ()
		WindowCreate (win, 0, 0, 300, 150, miniwin.pos_center_all, 0, ColourNameToRGB("white"))
		if (SafePieces == null) then
			ResetTable ()
			--Note ("Debug: SafePieces table wasn't set up, but now is.")
			WindowCreate (win, 0, 0, 300, 150, miniwin.pos_center_all, 0, ColourNameToRGB("white"))
			DisplayComponents ()
			Execute("inspect safe")
			
		else
			
			-- iterate through components
			for k, v in pairs (SafePieces) do
				-- if Inplay lower case, font colour red, otherwise green.
				if (v["InPlay"] == string.lower(v["InPlay"])) then
					FontColour = ColourNameToRGB("red")
				else
					FontColour = ColourNameToRGB("green")
				end -- if

				-- Set window font for this component
				WindowFont (win, "f", "Trebuchet MS", 12, v["Charged"], false, v["Selected"], false) -- define font
				-- Place this component
				WindowText (win, "f", v["InPlay"], v["Column"] * 20, v["Row"] * 20, 0, 0, FontColour, false)
				--add hotspot for letters and wires
				WindowAddHotspot(win, v["ID"],  
                   v["Column"] * 20, v["Row"] * 20, (v["Column"] * 20) + 20, (v["Row"] * 20) + 20, 
                   "", -- mouseover (do nothing)
                   "", -- cancelmouseover (do nothing)
                   "MouseDown",
                   "", -- cancelmousedown (do nothing)
                   "", -- mouseup (do nothing)
                   hint,    -- hint text if they hover over it              
                   miniwin.cursor_hand, 0)
				
			end -- for
			WindowShow (win, true)
		end -- if
		
	end -- function DisplayComponents
	function MouseDown (name, line, wildcards)
		--Note (SafePieces[line]["Selected"])
		if ((SafePieces[line]["Type"]) == "Letter" ) then
			-- is a wire selected?
			local SelectedWire = GetVariable "SelectedWire" or "None"
			if (SelectedWire ~= "None") then
				-- yes, attempt to connect wire to letter
				Send ("connect " .. SelectedWire .. " wire to " .. string.lower(line))
				-- deselect wires
				DeselectWires ()
			else
				-- no wire selected, slide the letter
				Send ("slide " .. string.lower(line))
			end -- if
		elseif ((SafePieces[line]["Type"]) == "Wire" ) then
			SafePieces[line]["Selected"] = not(SafePieces[line]["Selected"])
			if (SafePieces[line]["Selected"]) then
				DeselectWires ()
				SafePieces[line]["Selected"] = true
				SetVariable ("SelectedWire", line)
			end -- if
		end -- if
		DisplayComponents ()
	end -- function MouseDown

	function DeselectWires ()
		for k, v in pairs (SafePieces) do
			if (v["Type"] == "Wire") then
				v["Selected"] = false
			end -- if
		end -- for
		SetVariable ("SelectedWire", "None")
	end -- function DeselectWires
	function OutPlay (Name, Line, Wildcards)
		if (SafePieces == null) then
			ResetTable ()
		end -- if
		
		SafePieces[Wildcards[1]] ["InPlay"] = string.lower(SafePieces[Wildcards[1]] ["InPlay"])
		SafePieces[Wildcards[1]] ["Colour"] = "red"
		DisplayComponents ()
	end -- function OutPlay

	function SafeCracked()
		ResetTable ()
		ColourTell ("green", "", "S U C C E S S !")
		Note ("")
		world.EnableTrigger("InspectSafe", false)
		WindowShow (win, false)	
		Execute("frimble raidsafe alias")
		Execute("raidsafe")
	end -- function SafeCracked

	function OnPluginInstall ()
	  win = "A" .. GetPluginID ()
	  font_id = "fn"
	  bold_font_id = "fb"
	  
	  font_name = "Sylfaen"    -- the actual font
	  font_size = 8

	  -- make window so I can grab the font info
	  WindowCreate (win, 
					0, 0, 0, 0,  -- empty window
					miniwin.pos_top_left,   -- position (irrelevant)
					0,   -- flags (none)
					0)   -- background colour (black - irrelevant)
					
	  -- add font in normal and bold styles                 
	  WindowFont (win, font_id, font_name, font_size, 
				  false, false, false, false,  -- normal
				  miniwin.font_charset_ansi, miniwin.font_family_any)
				  
	  WindowFont (win, bold_font_id, font_name, font_size, 
				  true, false, false, false,   -- bold
				  miniwin.font_charset_ansi, miniwin.font_family_any)
	  
	  -- find height of font for future calculations             
	  font_height = WindowFontInfo (win, font_id, 1)  -- height
	  
	end -- OnPluginInstall

	function AbandonSafe ()
		ResetTable ()
		WindowShow (win, false)
		world.EnableTrigger("InspectSafe", false)
	end -- function AbandonSafe

	function ChargeLetter (name, line, wildcards)
		--Note (wildcards[1])
		SafePieces[wildcards[1]] ["Charged"] = true
		DisplayComponents ()
	end -- function ChargeLetter
	
	function DisChargeLetter (name, line, wildcards)
		SafePieces[wildcards[2]] ["Charged"] = false
		DisplayComponents ()
	end -- function DisChargeLetter

	function SuccessfulPanelCrack ()
		
		world.EnableTrigger("InspectSafe", true)
		DisplayComponents ()
	end -- function SuccessfulPanelCrack
	
	function UpdateGrid (name, line, wildcards)
		--Note ("UpdateGrid: " .. line)
		--tprint (wildcards)
		--Attempt to assign each location's tile value to a variable to enable tracking of that value tile.
		--Note("tl: ".. wildcards.tl)
		tl = wildcards.tl
		tm = wildcards.tm
		tr = wildcards.tr
		mr = wildcards.mr
		mm = wildcards.mm
		ml = wildcards.ml
		bl = wildcards.bl
		bm = wildcards.bm
		br = wildcards.br
		
		
		for k,v in pairs (wildcards) do
			if (v == " " and type(k) ~= "number") then
				space = tostring(k)
			end -- if 
		end -- for
		--Note ("Space: " .. space)
		pan = "pan:"
		if space == "tl" then 
			pan = "pan " .. ml .. " " .. bl .. " " .. bm .. " " .. br .. " " .. mr .. " " .. tr .. " " .. tm 
		end -- if
		if space == "tm" then 
			pan = "pan " .. tl .. " " .. ml .. " " .. bl .. " " .. bm .. " " .. br .. " " .. mr .. " " .. tr 
		end -- if
		if space == "tr" then 
			pan = "pan " .. tm .. " " .. tl .. " " .. ml .. " " .. bl .. " " .. bm .. " " .. br .. " " .. mr 
		end -- if
		if space == "ml" then 
			pan = "pan " .. bl .. " " .. bm .. " " .. br .. " " .. mr .. " " .. tr .. " " .. tm .. " " .. tl 
		end -- if
		if space == "mm" then 
			--Note("mm: " .. mm)
			pan = "pan " .. tm .. " " .. tl .. " " .. ml .. " " .. bl .. " " .. bm .. " " .. br .. " " .. mr 
		end -- if
		if space == "mr" then 
			pan = "pan " .. tr .. " " .. tm .. " " .. tl .. " " .. ml .. " " .. bl .. " " .. bm .. " " .. br 
		end -- if
		if space == "bl" then 
			pan = "pan " .. bm .. " " .. br .. " " .. mr .. " " .. tr .. " " .. tm .. " " .. tl .. " " .. ml 
		end -- if
		if space == "bm" then 
			pan = "pan " .. br .. " " .. mr .. " " .. tr .. " " .. tm .. " " .. tl .. " " .. ml .. " " .. bl 
		end -- if
		if space == "br" then 
			pan = "pan " .. mr .. " " .. tr .. " " .. tm .. " " .. tl .. " " .. ml .. " " .. bl .. " " .. bm 
		end -- if 
		--Note (pan)
		pan =string.lower(pan)
		Hyperlink(pan,pan,pan,"blue","green",0)
		SetVariable("pan", pan)
	end -- function
	
	function TestPanel ()
		--tprint(SafePieces)
		--Iterate through SafePieces
		IPLetters = {}
		IPWires = {}
		for k, v in pairs (SafePieces) do
			
			--if Safepiece is in play and charged
			--Note("k: " .. SafePieces [k] ["InPlay"])
			--Only check wires and letters

			if (SafePieces [k] ["Type"] == "Letter" or SafePieces [k] ["Type"] == "Wire") then
				--Note (k .. " is a  " .. SafePieces [k] ["Type"]) 
				if (SafePieces [k] ["InPlay"] == string.lower(SafePieces [k] ["InPlay"])) then
					--not in play
					--Note (k .. " is not in play.")
				else
					--in play
					--Note (k .. " is in play.")
					if SafePieces [k] ["Type"] == "Letter" then
						IPLetters [#IPLetters + 1] = k
						
						--Note("Letter " .. k .. " added to IPLetters (" .. #IPLetters .. ")")
					else
						IPWires [#IPWires + 1] = k
						--Note("Wire " .. k .. " added to IPWires (" .. #IPWires .. ")")
					end -- if
					-- iterate through wires
						--if wire is in play
							--attach wire to piece and mark as discharged
				end -- if	
				
				-- Build picture of panels
				if (SafePieces [k] ["Type"] == "Panel") then
				
				end -- if
			end -- if
		end -- for	
		--Note("IPLetters: " .. #IPLetters)
		--Note("#IPWires: " .. #IPWires)
		strPanelStart = "alias panelexecute "
		--Note (math.min(#IPWires,#IPLetters))
		Tell("|")
		panelsalias = ""
		for wirekey = 1, math.min(#IPWires,#IPLetters), 1 do
			Hyperlink("connect " .. IPWires [wirekey] .. " to " .. string.lower(IPLetters [wirekey]),"connect " .. IPWires [wirekey] .. " to " .. string.lower(IPLetters [wirekey]) , "connect " .. IPWires [wirekey] .. " to " .. string.lower(IPLetters [wirekey]), "blue", "green",0)
			Tell("|")
			panelsalias = panelsalias .. "connect " .. IPWires [wirekey] .. " to " .. string.lower(IPLetters [wirekey]) .. ";"
		end -- for
		pan = GetVariable("pan")
		--Note ("pan: " .. pan)
		panelsalias = panelsalias .. pan
		Hyperlink(pan,pan,pan,"blue","green",0)
		SetVariable("panelsalias",panelsalias)
		Tell("|")
		Hyperlink("!!71a76b438ec6fa4671b9c4b6:PanelsAlias()","panelsalias","panelsalias","blue","green",0)
		
	end --function TestPanel

	function PanelsAlias()
		panelsalias = GetVariable("panelsalias") or ""
		if (panelsalias ~= "") then
			Execute ("alias panelsalias " .. panelsalias .. ";unalias panelsalias")
			Execute ("panelsalias")
		end -- if
	end -- function
--END FUNCTIONS
]]>
</script> 
</muclient>
