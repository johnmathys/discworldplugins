<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Sunday, January 23, 2022, 12:05 PM -->
<!-- MuClient version 5.06 -->

<!-- Plugin "ShopStock" generated by Plugin Wizard -->

<!--
Test comment
-->

<muclient>
<plugin
   name="ShopStock"
   author="Kalu"
   id="c96dee5e25907bbc4123e613"
   language="Lua"
   purpose="Track stock inna shop"
   date_written="2022-01-23 12:02:48"
   save_state="y"
   requires="5.06"
   version="1.1"
   >
<description trim="y">
<![CDATA[
Track player shop (or other room) stock levels. 

Usage:
shopstock <parameters>

Examples:
shopstock update			-		When in the shop, updated the current stock table (stockMap).
shopstock find <item>		-		Locate the levels for stock items based on a partial string. Empty string e.g. <space> after shopstock find will return all items.
shopstock allitems			-		Display a sorted list of all current stock.
shopstock delta				-		Show delta since last update of stock

Ideas for additional function:
	* Save tables between plugin reloads. :0S
	* Keep a masterStock table so that min max both default for all and specific individual items can be maintained.
	* Set min stock level for an item in the masterStock table. This will facilitate a table of items to order/request/gather.
	* Set max stock level for an item in the masterStock table. This will facilitate a table of items to migrate to backup storage, to help optimise stock levels and space.
	* Set items to ignore e.g. packets of scrolls.
	* ...


Version History:
1.0: Original version with base functions: update, find, allitems.
1.1: Show delta since last update of stock


]]>
</description>

</plugin>


<!--  Triggers  -->

<triggers>
  <trigger
   custom_colour="2"
   group="Shop"
   match="^(?P<stockItem>.+?)$"
   name="UpdateStock"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
   script="GatherStock"
  >
  </trigger>
  <trigger
   group="Shop"
   match="UpdateStockEnd"
   name="UpdateStockEnd"
   send_to="12"
   sequence="100"
   script="EndGatherStock"
  >
  </trigger>
</triggers>

<!--  Aliases  -->

<aliases>
  <alias
   match="^ShopStock Find (?P<findItem>.+?)$"
   regexp="y"
   enabled="y"
   group="Shop"
   send_to="12"
   ignore_case="y"
   sequence="100"
   script="FindStockItem"
  >
  </alias>  
  <alias
   match="^shopstock allitems$"
   regexp="y"
   enabled="y"
   group="Shop"
   send_to="12"
   ignore_case="y"
   sequence="100"
   script="DisplayStock"
  >
  </alias>
  <alias
   match="ShopStock Update"
   enabled="y"
   group="Shop"
   send_to="12"
   ignore_case="y"
   sequence="100"
   script="ShopStockUpdate"
  >

  </alias>

  <alias
   script="OnHelp"
   match="ShopStock help"
   ignore_case="y"
   enabled="y"
  >
  </alias>
  <alias
   script="showdelta"
   match="ShopStock delta"
   ignore_case="y"
   enabled="y"
  >
  </alias>
  
</aliases>

<script>
<![CDATA[
require "pairsbykeys"
require "copytable" -- table copying module included with MUSHclient
require "serialize"
require "tprint"
function OnPluginInstall ()
	--Ensure that the overall masterStock table exists.
	assert (loadstring (GetVariable ("masterStock") or "")) ()
	assert (loadstring (GetVariable ("stockMap") or "")) ()
	assert (loadstring (GetVariable ("oldStockMap") or "")) ()
	
	if masterStock == null then
	  masterStock = {}
	end -- if
	if stockMap == null then
		stockMap = {}
	end -- if 
	if oldStockMap == null then
		oldStockMap = {}
	end -- if 
	
end -- function OnPluginInstall	

	function OnPluginSaveState ()

		SetVariable ("masterStock", "masterStock = " .. serialize.save_simple (masterStock))
		SetVariable ("stockMap", "stockMap = " .. serialize.save_simple (stockMap))
		SetVariable ("oldStockMap", "oldStockMap = " .. serialize.save_simple (oldStockMap))
		
	end -- function OnPluginSaveState
function OnHelp ()
  world.Note (world.GetPluginInfo (world.GetPluginID (), 3))
end -- function OnHelp

function ShopStockUpdate (name,line,wildcards)
	--Save the old table
	oldStockMap = copytable.deep(stockMap)
	
	--Empty the stockMap table.
	stockMap = {}
	
	--Start gathering a list of items in furniture.
	SendNoEcho ("glance things in furniture")

	--Flag up when the gather is complete - so that the related triggers can be disabled.
	SendNoEcho ("frimble UpdateStockEnd")
	
	--Enable the triggers that gather stock items and eventually detect the end of the gather.
	world.EnableTrigger("UpdateStock",true)
	world.EnableTrigger("UpdateStockEnd",true)
end -- function ShopStockUpdate

function GatherStock (name,line,wildcards)
	--Ensure that the table stockMap exists.
	if stockMap == null then
	  stockMap = {}
	end -- if
	
	--
	item = wildcards.stockItem
	--Note ("Item: " .. item)
	if stockMap[item] == null then
	--New item found.

	
		stockMap [item]=1
		if masterStock[item] == null then
		--Never seen before so add to the overall table of items.
		masterStock [item]=item
	  end -- if
	else
	  count = stockMap [item]
	  count = count + 1
	  stockMap [item]=count
	--  Note ("Existing item found: " .. item .." New count: " .. count)
	end -- if

end -- function GatherStock

function FindStockItem (name, line, wildcards)
	--Note ("wildcards: " .. wildcards.findItem)
	item = wildcards.findItem
	FindItem (item)
end -- function FindStock

function FindItem (item)
	Note ("Item to find: " .. item)
	if (stockMap == null) then
		Note ("No stock available to search.")
	else

		found = false
		for k, v in pairsByKeys (stockMap) do
		  if string.match (k,item) then
			Note (k .. " = " .. v)
			-- TODO display k, v with options such as get one, set-min, set-max, ignore (will need a commandline for unignore).
			found = true
		  end -- if
		end -- for
		if found == false then
		  Note ("Item: " .. item .. " not found!")
		end -- if
	end -- if
end -- function FindItem

function DisplayStock ()
	FindItem (" ")
end -- function DisplayStock

function EndGatherStock (name,line,wildcards)
	world.EnableTrigger("UpdateStock",false)
	world.EnableTrigger("UpdateStockEnd",false)
	Note ("Stock Updated.")

	countOfItemTypes=0
	countOfItems=0
	table.sort (stockMap)
	table.sort (masterStock)

	for k,v in pairs (stockMap) do
	  countOfItemTypes = countOfItemTypes + 1
	  countOfItems = countOfItems + tonumber(v)
	  --Note (k .. " = " .. v)
	end -- for
	Note ("countOfItemTypes: " .. countOfItemTypes)
	Note ("countOfItems: " .. countOfItems)
end -- function EndGatherStock

function showdelta()
	-- oldStockMap vs stockMap
	-- show items in oldStockMap but not stockMap
	differences=false
	for k, v in pairs(oldStockMap) do
		if (v ~= stockMap [k]) then
			oldStock = stockMap [k] or 0
			Note (k .. " previously: " .. v .. " now: " .. oldStock)
			differences=true
		end -- if
	end -- for
	if (differences == false) then
		Note("No difference found.")
	end -- if
	
end -- function showdelta
]]>
</script> 

</muclient>
